name: 🚀 Deploy Chemistry Lab to GitHub Pages

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Allow manual deployment

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job with comprehensive error handling
  build:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18, 20] # Test on multiple Node versions
      fail-fast: false # Don't stop other jobs if one fails
    
    steps:
      - name: 📋 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full git history for better debugging
      
      - name: 🔧 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: package-lock.json
      
      - name: 📦 Verify package.json
        run: |
          echo "🔍 Package.json validation..."
          cat package.json
          node -e "console.log('✅ Package.json is valid JSON')"
      
      - name: 🔍 Environment diagnostics
        run: |
          echo "🔍 System diagnostics:"
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"
          echo "Working directory: $(pwd)"
          echo "Directory contents:"
          ls -la
          echo "Git status:"
          git status
      
      - name: 🧹 Clean install dependencies
        run: |
          echo "🧹 Cleaning previous installations..."
          rm -rf node_modules package-lock.json
          echo "📦 Installing dependencies..."
          npm install --no-optional --audit-level=moderate
      
      - name: 🔍 Dependency audit
        run: |
          echo "🔍 Checking for vulnerabilities..."
          npm audit --audit-level=moderate || echo "⚠️ Some vulnerabilities found but continuing..."
      
      - name: 🧪 Lint check
        run: |
          echo "🧪 Running ESLint..."
          npm run lint || echo "⚠️ Lint warnings found but continuing..."
      
      - name: 🔨 Build application
        run: |
          echo "🔨 Building application for production..."
          echo "🔑 API Key Status: ${{ secrets.VITE_GEMINI_API_KEY && 'Configured' || 'Not configured' }}"
          NODE_ENV=production npm run build
        env:
          NODE_OPTIONS: '--max_old_space_size=4096'
          VITE_GEMINI_API_KEY: ${{ secrets.VITE_GEMINI_API_KEY }}
      
      - name: 🔍 Build verification
        run: |
          echo "🔍 Verifying build output..."
          if [ ! -d "dist" ]; then
            echo "❌ Error: dist directory not found!"
            exit 1
          fi
          
          if [ ! -f "dist/index.html" ]; then
            echo "❌ Error: index.html not found in dist!"
            exit 1
          fi
          
          echo "✅ Build verification passed!"
          echo "📁 Dist directory contents:"
          ls -la dist/
          echo "📄 Index.html size: $(wc -c < dist/index.html) bytes"
      
      - name: 🔧 Setup GitHub Pages
        if: matrix.node-version == 20 # Only run on latest Node version
        uses: actions/configure-pages@v4
      
      - name: 📤 Upload Pages artifact
        if: matrix.node-version == 20 # Only upload once
        uses: actions/upload-pages-artifact@v3
        with:
          path: './dist'
          retention-days: 1

  # Deploy job with fallback mechanisms
  deploy:
    needs: build
    runs-on: ubuntu-latest
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: 🚀 Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          timeout: 600000 # 10 minutes timeout
        continue-on-error: true
      
      - name: 🔍 Deployment verification
        if: steps.deployment.outcome == 'success'
        run: |
          echo "✅ Deployment successful!"
          echo "🌐 Site URL: ${{ steps.deployment.outputs.page_url }}"
          
          # Wait for deployment to propagate
          echo "⏳ Waiting for deployment to propagate..."
          sleep 30
          
          # Test site accessibility
          echo "🔍 Testing site accessibility..."
          curl -f -s "${{ steps.deployment.outputs.page_url }}" > /dev/null && echo "✅ Site is accessible!" || echo "⚠️ Site might still be propagating..."
      
      - name: 🔧 Fallback deployment
        if: steps.deployment.outcome == 'failure'
        run: |
          echo "❌ Primary deployment failed, attempting fallback..."
          echo "This would trigger alternative deployment methods"
          exit 1

  # Health check job
  health-check:
    needs: deploy
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: 🏥 Post-deployment health check
        run: |
          echo "🏥 Running post-deployment health checks..."
          
          # Basic connectivity test
          SITE_URL="https://jes-win-hac-ker.github.io/browser-lab-experiments/"
          
          echo "🔍 Testing site: $SITE_URL"
          
          # Wait for DNS propagation
          sleep 60
          
          # Test with retries
          for i in {1..5}; do
            echo "🔍 Attempt $i/5..."
            if curl -f -s -L "$SITE_URL" > /dev/null; then
              echo "✅ Site is healthy and accessible!"
              break
            else
              echo "⚠️ Site not accessible yet, retrying in 30s..."
              sleep 30
            fi
            
            if [ $i -eq 5 ]; then
              echo "❌ Site health check failed after 5 attempts"
              echo "This might be normal for new deployments - check manually"
            fi
          done
      
      - name: 📊 Deployment summary
        if: always()
        run: |
          echo "📊 Deployment Summary:"
          echo "Repository: browser-lab-experiments"
          echo "Target URL: https://jes-win-hac-ker.github.io/browser-lab-experiments/"
          echo "Deployment time: $(date)"
          echo "Status: Check previous steps for details"
